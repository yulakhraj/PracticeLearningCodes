Memory Management

C++ Q&A Notes

Following are some of the topics whose answers we need?

1.	What is memory management?
2.	What is memory leak?
3.	What is stack and heap memory?
4.	What is early binding and late binding?
5.	Explain overriding.
6.	Explain explicit keyword.
7.	Shallow copy and Deep copy.
8.	What is virtual function? What is vfptr and vtable?
9.	What is static function and how is it internally represented?
10.	What is a virtual destructor?
11.	Ambiguity error. When compiler cannot decide which one to call? Can you explain the time when such errors come?
12.	Smart Pointer.
13.	Multi-threading in C++.
-----------------------------------------------------------------
Basics

Memory Layout

      Box
     +------+
     |      |
     +------+

      Memory Location
     +------+
     |      |
     +------+

     Memory 
     +------+
     |      | <--- Memory Location
     +------+
     |      | <--- Memory Location
     +------+
     |      | <--- Memory Location
     +------+

  Memory Address    Memory Location
                     +------+
    100 ------------>|      |
                     +------+

--------------------------------------------------
Bit 
    0  or  1

A bit is either 0 or 1.

Nibble

A nibble stands for 4 bits

   0000
   0010
   1111
Example of nibble.

An octet stands for 8 bits

    00000000
    00000001
    11111111

A byte stands for 8 bits.

    00000000
    00000001
    11111111

--------------------------------------------------
1-bit memory

     +---+
     | 0 |
     +---+
    1 bit memory

     +---+
     | 1 |
     +---+
    1 bit memory


Eight bit storage
1 byte of storage

     +---+---+---+---+---+---+---+---+
     | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 |
     +---+---+---+---+---+---+---+---+

1 byte storage
    +----------------------------------+
    |+---+---+---+---+---+---+---+---+ |
    || 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | |
    |+---+---+---+---+---+---+---+---+ |
    +----------------------------------+

     +---+---+---+---+---+---+---+---+
     | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
     +---+---+---+---+---+---+---+---+

--------------------------------------------------
Byte addressable memory

Every byte is given a unique address

    Address
               +---+---+---+---+---+---+---+---+
     100   --->| 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | <---- Byte
               +---+---+---+---+---+---+---+---+
     101   --->| 1 | 1 | 0 | 0 | 1 | 1 | 0 | 0 | <---- Byte
               +---+---+---+---+---+---+---+---+
         ^
         | Visualize/Imagine
  O  ----+
  |-
  /\
Programmer

---------------------------------------------------
Number System
   Decimal Number System  - 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ....
                           <---------------------------->
                                    10 digits

   The base of the decimal number system is 10 (ten)

   Binary Number System
        Base is 2
        i.e. there are only 2 digits - 0, 1, 

----------------------------------------------------

   Decimal      Binary      Binary         Octal        Hexadecimal
   Number       Number      Number         Number       Number
   System       System      System         System       System
  Base : 10     Base : 2    Base : 2       Base : 8     Base : 16
                            (with leading
                             zeros)
---------------------------------------------------------------------
      0             0         0000             0           0
      1             1         0001             1           1
      2            10         0010             2           2
      3            11         0011             3           3
      4           100         0100             4           4
      5           101         0101             5           5
      6           110         0110             6           6
      7           111         0111             7           7
      8          1000         1000            10           8
      9          1001         1001            11           9
     10          1010         1010            12           a  or A
     11          1011         1011            13           b  or B
     12          1100         1100            14           c  or C
     13          1101         1101            15           d  or D
     14          1110         1110            16           e  or E
     15          1111         1111            17           f  or F
----------------------------------------------------------------------
                                              20          10
----------------------------------------------------------------------

Binary Number System
      0   or   1

Operation : Not operation

               O
      0 --->  -| --->  1  
              /\
             Not operation

               O
      1 --->  -| --->  0
              /\
             Not operation

Operation : Complement operation

               O
      0 --->  -| --->  1  
              /\
             Complement operation

               O
      1 --->  -| --->  0
              /\
             Complement operation

----------------------------------------------
Binary Addition

     0      0      1      1
   + 0    + 1    + 0    + 1
   ----   ----   ----   ----
     0      1      1     10  (2 in decimal)
----------------------------------------------

       0 1 0 1

1's complement - What we do is we make 0 as 1 and 1 as 0

       1 0 1 0

                   O
   1 1 1 1 ---->  -|  ----->  0 0 0 0
                  /\ 
               1's complement


                   O
   1 0 0 1 ---->  -|  ----->  0 1 1 0
                  /\ 
               1's complement

------------------------------------------------
2's complement
  
   2's complement ==>  1's complement and add 1 to it.

  
                  0 0 1 0

1's complement   1 1 0 1

-------------------------------------
         Carry        1                   1 + 1 = 10
1's complement   1 1 0 1
               +        1
               ----------
2's complement   1 1 1 0

                   O
   0 0 1 0  --->  -| --->  1 1 1 0
                  /\
                2's complement

                   O
   0 0 1 0  --->  -| --->  1 1 0 1  ---->
                  /\                        O
                1's complement             -| ----->  1 1 1 0
                                           /\
                                 1  ----> Binary
                                          addition

----------------------------------------------------------

Suppose we write a number say 9

     9  is to be converted into a binary number

     9 ----->  1001
              <---->
                4 bit number

32-bit number

    00000000  00000000 00000000 00001001    <--- represents 9 or +9

----------------------------------------------------------

         1    0    0    1
         b3   b2   b1   b0  <--- Bit label.

Every bit is given a name or a label or a tag.

     0   0   1   0   0   1   1   1
     b7  b6  b5  b4  b3  b2  b1  b0  <--- Bit label

-----------------------------------------------------------

       0010   0111
       <--->  <--->
       nibble nibble

       0010   0111
        n1     n0  <--- Nibble label.

----------------------------------------------------------

    
    00000000  00000000  00000000  00001001 
    <------>  <------>  <------>  <------>
      octet    octet     octet     octet

    00000000  00000000  00000000  00001001 
    <------>  <------>  <------>  <------>
      byte      byte      byte      byte


    00000000  00000000  00000000  00001001 
       B3        B2        B1        B0     <--- Byte labels

In a 32-bit number, we have 4 bytes, and they are labelled as B3, B2, B1, B0
----------------------------------------------------------

In 64-bit

00000000 00000000 00000000 00000000 00000000  00000000  00000000  00001001  <--- 9 in 64 bit
   B7       B6       B5       B4       B3        B2        B1       B0

In a 64-bit number, we have 8 bytes, and they are labelled as B7, B6, B5, B4, B3, B2, B1, B0

----------------------------------------------------------
  
           1                 0               0              1
          b3                 b2              b1            b0
           ^                                                ^
           |                                                |
        Most significant bit (msb)               Least significant bit (lsb)




    00000000  00000000  00000000  00001001 
       B3        B2        B1        B0     <--- Byte labels
    <------>                      <------->
    Most                          Least
    Significant                   Significant
    Byte                          Byte
    (MSB)                         (LSB)
------------------------------------------------------------

    O      O              +------+    +------+
    |-     |-             |      |    |      |
    /\     /\             +------+    +------+
    H1     H2               R1           R0
Two human beings           Two rooms

------------------------------------------------------------- 

    O      O                     +------+
    |-     |-                    |      | R0
    /\     /\                    +------+
    H1     H2                    |      | R1
Two human beings                 +------+
                                 Two rooms


------------------------------------------------------------- 

    O      O                     +------+
    |-     |-                    |      | R0
    /\     /\                    +------+
    H1     H0                    |      | R1
                                 +------+
Two human beings                 Two rooms 
                  

------------------------------------------------------------- 

Scenario #1

    O      O                     +----------+
    |-     |-                    |    O     | R0
    /\     /\                    |    |-    |
    H1     H0                    |    /\    |
                                 |    H0    |
                                 +----------+
                                 |    O     | R1
                                 |    |-    |
                                 |    /\    |
                                 |    H1    |
                                 +----------+
--------------------------------------------------------------

Scenario #2

    O      O                     +----------+
    |-     |-                    |    O     | R0
    /\     /\                    |    |-    |
    H1     H0                    |    /\    |
                                 |    H1    |
                                 +----------+
                                 |    O     | R1
                                 |    |-    |
                                 |    /\    |
                                 |    H0    |
                                 +----------+

--------------------------------------------------------------
                  
Scenario #1

                                 +----------+
                                 |    O     | R0
                                 |    |-    |
                                 |    /\    |
                                 |    H0    |
                                 +----------+
                                 |    O     | R1
                                 |    |-    |
                                 |    /\    |
                                 |    H1    |
                                 +----------+
                                 |    O     | R2
                                 |    |-    |
                                 |    /\    |
                                 |    H2    |
                                 +----------+
                                 |    O     | R3
                                 |    |-    |
                                 |    /\    |
                                 |    H3    |
                                 +----------+

--------------------------------------------------------------

Scenario #2

                                 +----------+
                                 |    O     | R0
                                 |    |-    |
                                 |    /\    |
                                 |    H3    |
                                 +----------+
                                 |    O     | R1
                                 |    |-    |
                                 |    /\    |
                                 |    H2    |
                                 +----------+
                                 |    O     | R2
                                 |    |-    |
                                 |    /\    |
                                 |    H1    |
                                 +----------+
                                 |    O     | R3
                                 |    |-    |
                                 |    /\    |
                                 |    H0    |
                                 +----------+

--------------------------------------------------------------

Decimal number 9

Binary number (32-bit form)

   00000000  00000000  00000000  00001001 
       B3        B2        B1        B0     <--- Byte labels
                           |         |
      Memory    Memory    |         +-------------+
       Address             +----------------------------+
                +---+---+---+---+---+---+---+---+  |    | 
          100   | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 |<-+ B0 |     <--- Memory Location
                +---+---+---+---+---+---+---+---+       |
          101   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |<------+ B1  <--- Memory Location
                +---+---+---+---+---+---+---+---+
          102   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B2          <--- Memory Location
                +---+---+---+---+---+---+---+---+ 
          103   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B3           <--- Memory Location
                +---+---+---+---+---+---+---+---+


                Memory    Memory    
                Address            
                        +---+---+---+---+---+---+---+---+
  Lower address   100   | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | B0  Least significant byte
                        +---+---+---+---+---+---+---+---+
                  101   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B1
                        +---+---+---+---+---+---+---+---+
                  102   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B2
                        +---+---+---+---+---+---+---+---+ 
  Higher address  103   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B3  Most significant byte
                        +---+---+---+---+---+---+---+---+
  
Little Endian System - The least significant byte goes at a lower memory address, and then increasingly
                       subsequent bytes go at the higher addresses.

--------------------------------------------------------------
Decimal number 9

Binary number (32-bit form)

   00000000  00000000  00000000  00001001 
       B3        B2        B1        B0     <--- Byte labels

                Memory    Memory   
                Address
                       +---+---+---+---+---+---+---+---+
Lower address   100   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |  B3 <--- Most significant byte
                       +---+---+---+---+---+---+---+---+
                 101   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |  B2
                       +---+---+---+---+---+---+---+---+
                 102   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |  B1
                       +---+---+---+---+---+---+---+---+ 
 Higher address  103   | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 |  B0 <--- Least significant byte
                       +---+---+---+---+---+---+---+---+

Big Endian System - The most significant byte goes at a lower memory address, and then decreasingly
                    subsequent bytes go at the higher addresses.

--------------------------------------------------------------
C/C++ Programming

int main()
{
  int i = 9;

  return 0;
}

In our machine, we have little endian architecture.

Conceptually
            Data Type    Name          Memory
                         Identifier    Location
   O         int          i            +-------+
   |- ---------------------------------|   9 <---- Number, Integer, Value, Data
   /\                                  +-------+
  main       int *        &i  ----------> 100 <---- Memory address
  function               Expression


    9 is converted into binary   1001
In a 32 bit system, this 9 would be
    00000000  00000000  00000000  00001001 
       B3         B2       B1       B0
    Most                          Least significant byte
    significant
    byte

                Memory    Memory    
                Address            
                        +---+---+---+---+---+---+---+---+
  Lower address   100   | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | B0  Least significant byte  
                        +---+---+---+---+---+---+---+---+
                  101   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B1
                        +---+---+---+---+---+---+---+---+
                  102   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B2
                        +---+---+---+---+---+---+---+---+ 
  Higher address  103   | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | B3  Most significant byte
                        +---+---+---+---+---+---+---+---+

------------------------------------------------------------------------------------------
             
       Address  Binary number        Hexadecimal number
                format
                Data/Value/Content
        100       0000 1001              0x09
        101       0000 0000              0x00
        102       0000 0000              0x00
        103       0000 0000              0x00

-----------------------------------------------------------------------------------------

  In Microsoft Visual Studio IDE - When we use the debugger, and we see the memory view
  then we will see how the data i.e. our integer i variable's value is stored.
   
      Memory     Data/Value
      Address
        100       09
        101       00
        102       00
        103       00
-----------------------------------------------------------------------------------------
Why should we learn about :
       Bit, Nibble, Byte, Octet
       Number, Binary Number, Octal Number, Hexadecimal
       Bit Labelling, Nibble Labelling, Byte Labelling
       Little Endian System, Big Endian System

    .... As a C/C++ programmer, we are going to use the debugger for fixing bugs and also possibily
         to understand the code.
         When debugging, we want to see how the memory layout exists.
------------------------------------------------------------------------------------------

Story : 

                O                         O
                |-                        |-
                /\                        /\
               Ramesh                   Mahesh    Mahesh is rich and owns a cinema hall
                                          
        O                                 +------------------------+
        |-                                |      Screen            |
        /\                                |                        | Cinema Hall
       Priya                              |   O    O    O    O   <---- Seats, in a row
                                          |                        |
                                          |   O    O    O    O     |
                                          |                        |
                                          +------------------------+
                                     
                                    O
                                   -|
                                   /\
                                Suresh

     Mahesh is the owner of the cinema hall
     Suresh is the manager of the cinema hall.
     Ramesh and Mahesh are friends.
     Ramesh comes to Mahesh and says I want to see a movie in your cinema hall.
     Mahesh tells, Please go to Suresh, and Suresh will help you out.
     Ramesh comes to Suresh and says I want 2 seats for the movie.
     Remember : Seats are fixed. They are not moveable. i.e. Seats are fixed/immovable.

     What Suresh does is he needs a way to identify which seats are to be given.

                O                         O
                |-                        |-
                /\                        /\
               Ramesh                   Mahesh    Mahesh is rich and owns a cinema hall
                                          
        O                                 +------------------------+
        |-                                |      Screen            |
        /\                                |                        | Cinema Hall
       Priya                          A   |   O    O    O    O   <---- Seats, in a row
                                          |   1    2    3    4     |
                                          |                        |
                                      B   |   O    O    O    O     |
                                          |   1    2    3    4     |
                                          |                        |
                                          +------------------------+
                                     
                                    O
                                   -|
                                   /\
                                Suresh
    Suresh does naming/labelling - Row labelling and so on.

    The naming is done to uniquely identify each of the seats.




                O                         O
                |-                        |-
                /\                        /\
               Ramesh                   Mahesh    Mahesh is rich and owns a cinema hall
                                          
        O                                 +------------------------+
        |-                                |      Screen            |
        /\                                |                        | Cinema Hall
       Priya                              |   O    O    O    O   <---- Seats, in a row
                                          |   1    2    3    4     |
                                          |                        |
                                          |   O    O    O    O     |
                                          |   5    6    7    8     |
                                          |                        |
                                          +------------------------+
                                     
                                    O
                                   -|
                                   /\
                                Suresh
    Suresh does naming/labelling but this time just uses a unique number.

    What Suresh does, is he takes a book/register, and maintains a log/record of all the seats which are allocated.


                O                         O
                |-                        |-
                /\                        /\
               Ramesh                   Mahesh    Mahesh is rich and owns a cinema hall
                                          
        O                                 +------------------------+
        |-                                |      Screen            |
        /\                                |                        | Cinema Hall
       Priya                              |   O    O    O    O   <---- Seats, in a row
                                          |   1    2    3    4     |
                                          |   x    x               |
                                          |                        |
                                          |   O    O    O    O     |
                                          |   5    6    7    8     |
                                          |                        |
                                          +------------------------+
                                
                            allocate-seats 2     
               +---------+  reserve-seats 2
           O   | +-----+ |  book-seats 2          O       Book/Register/Log
           |- -| |  1  | |  ----------------->   -|         +------------------------------------------+
           /\  | +-----+ |  <----------------    /\         | Entry | Starting | Number of             |
        Ramesh | Ticket  |     +-----+          Suresh      | No    | Seat     | Seats Booked/Reserved |
               +---------+     |  1  |                      |       | Number   |                       |
                 Purse         +-----+                      +------------------------------------------+
                 Wallet        Ticket                       |   1   |   1      |          2            |
                               Token                        +------------------------------------------+

     1. Ramesh requests for 2 seats, by giving the commands/orders/instructions like
                     allocate-seats 2
                     reserve-seats 2
                     book-seats 2
     2. Suresh goes and finds out which are the seats available, and allocates them
     3. Suresh marks it in his book/register/log, that what is the starting seat number, and how many seats
        are allocated. Right now Suresh is a simple guy. He allocates only sequential/contiguous seats.    
     4. In real life, Suresh gives a ticket and on that ticket the seat number is written.
     5. Ramesh apparently takes the ticket, and keeps it in his wallet/purse (container).

-------------------------------------------------------------------------------------------------------------------

                O                         O
                |-                        |-
                /\                        /\
               Ramesh                   Mahesh    Mahesh is rich and owns a cinema hall
                                          
        O                                 +------------------------+
        |-                                |      Screen            |
        /\                                |                        | Cinema Hall
       Priya                              |   O    O    O    O   <---- Seats, in a row
                                          |   1    2    3    4     |
                                          |   x    x    x    x     |
           O                              |   r    r    k    k     |
                                          |                        |
           |-                             |   O    O    O    O     |
           /\                             |   5    6    7    8     |
         Krina                            |   x    x    x          |
                                          |   k    k    k          |
                                          +------------------------+
                                
                            allocate-seats 5    
               +---------+  reserve-seats 5
           O   | +-----+ |  book-seats 5          O       Book/Register/Log
           |- -| |  3  | |  ----------------->   -|         +------------------------------------------+
           /\  | +-----+ |  <----------------    /\         | Entry | Starting | Number of             |
        Krina  | Ticket  |     +-----+          Suresh      | No    | Seat     | Seats Booked/Reserved |
               +---------+     |  3  |                      |       | Number   |                       |
                 Purse         +-----+                      +------------------------------------------+
                 Wallet        Ticket                       |   1   |   1      |          2            |
                               Token                        +------------------------------------------+
                                                            |   2   |   3      |          5            |
                                                            +------------------------------------------+

     1. Ramesh requests for 2 seats, by giving the commands/orders/instructions like
                     allocate-seats 2
                     reserve-seats 2
                     book-seats 2
     2. Suresh goes and finds out which are the seats available, and allocates them
     3. Suresh marks it in his book/register/log, that what is the starting seat number, and how many seats
        are allocated. Right now Suresh is a simple guy. He allocates only sequential/contiguous seats.    
     4. In real life, Suresh gives a ticket and on that ticket the seat number is written.
     5. Ramesh apparently takes the ticket, and keeps it in his wallet/purse (container).

---------------------------------------------------------------------------------------------------------------

     Mahesh is very rich. Suresh is efficient, but he says that he will only reserve the seats, i.e. he
     will only allocate/reserve the seats.

     If someone comes for cancelling the tickets, i.e. returning the seats allocated, i.e. for deallocation,
     then Suresh says, he doesn't want to do that job.

     In this situation, Mahesh hires one more person, lets say Kamlesh.

     Mahesh is a veteran in the movie industry.
     He ensures that Kamlesh should not have any problem. So Mahesh tells Suresh, that you will work closely
     with Kamlesh and share all the information. So Suresh and Kamlesh agree to use the Book/Register/Log.
  


                O                         O
                |-                        |-
                /\                        /\
               Ramesh                   Mahesh    Mahesh is rich and owns a cinema hall
                                          
        O                                 +------------------------+
        |-                                |      Screen            |
        /\                                |                        | Cinema Hall
       Priya                              |   O    O    O    O   <---- Seats, in a row
                                          |   1    2    3    4     |
                                          |   x    x    x    x     |
                                          |   r    r    k    k     |
           O                              |                        |
           |-                             |   O    O    O    O     |
           /\                             |   5    6    7    8     |
         Krina                            |   x    x    x          |
                                          |   k    k    k          |
                                          +------------------------+
                                
                            allocate-seats 5    
               +---------+  reserve-seats 5
           O   | +-----+ |  book-seats 5          O       Book/Register/Log
           |- -| |  3  | |  ----------------->   -|   --->  +------------------------------------------+
           /\  | +-----+ |  <----------------    /\    +->  | Entry | Starting | Number of             |
        Krina  | Ticket  |     +-----+          Suresh |    | No    | Seat     | Seats Booked/Reserved |
               +---------+     |  3  |                 |    |       | Number   |                       |
                 Purse         +-----+                 |    +------------------------------------------+
                 Wallet        Ticket                  |    |   1   |   1      |          2            |
                               Token                   |    +------------------------------------------+
                                                       |    |   2   |   3      |          5            |
                                                       |    +------------------------------------------+
                                                       |
                                                       |
                                                       |
                                                       |
                                                  O    |
                                                 -| ---+
                                                 /\
                                               Kamlesh


      Lets assume, Priya tells Ramesh we don't want to see the movie, please cancel it.
      Ramesh says ok. Ramesh now comes to Kamlesh for cancellation of the bookings. Cancellations means deallocation/free/release.

                O                         O
                |-                        |-
                /\                        /\
               Ramesh                   Mahesh    Mahesh is rich and owns a cinema hall
                                          
        O                                 +------------------------+
        |-                                |      Screen            |
        /\                                |                        | Cinema Hall
       Priya                              |   O    O    O    O   <---- Seats, in a row
                                          |   1    2    3    4     |
                                          |   x    x    x    x     |
                                          |             k    k     |
           O                              |                        |
           |-                             |   O    O    O    O     |
           /\                             |   5    6    7    8     |
         Krina                            |   x    x    x          |
                                          |   k    k    k          |
                                          +------------------------+
                                
                            allocate-seats 5    
               +---------+  reserve-seats 5
           O   | +-----+ |  book-seats 5          O       Book/Register/Log
           |- -| |  3  | |  ----------------->   -|   --->  +------------------------------------------+
           /\  | +-----+ |  <----------------    /\    +->  | Entry | Starting | Number of             |
        Krina  | Ticket  |     +-----+          Suresh |    | No    | Seat     | Seats Booked/Reserved |
               +---------+     |  3  |                 |    |       | Number   |                       |
                 Purse         +-----+                 |    +------------------------------------------+
                 Wallet        Ticket                  |   -----1--------1----------------2--------------- Cancelled/removed
                               Token                   |    +------------------------------------------+
                                                       |    |   2   |   3      |          5            |
                                                       |    +------------------------------------------+
                                                       |
                                                       |
                                                       |
                            free-seats 1               | 
                            deallocate-seats 1         |
                            release-seats 1            |
               +--------+   dereserve-seats 1          |
           O   | +----+ |   cancel-seats 1        O    |
           |- -| | 1  | |  ------------------->  -| ---+ 1. Kamlesh checks whether seat 1 is allocate in the book/register/log 
           /\  | +----+ |                        /\      2. He finds it, and removes that entry from the book/register/log.
         Ramesh| Ticket |                       Kamlesh
               +--------+
                 Purse
                 Wallet

   Suresh - allocator
   Kamesh - dellocator
--------------------------------------------------------------------------------------------------------------------
  
  From programming point of view

Code
   int main()
   {
       malloc( 4 );   
   }

Code visualization:
                                             O
                                            -|
                                            /\
                                    Notionally think of this as a Heap Manager
                                    Notionally (Mahesh)

               malloc(4);
               book-seats(4);                          Memory      Memory
            +-----------------+                        address
            |                 |                                 +---+---+---+---+---+---+---+---+
     O      |                 V      O                   100    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location
     |- --- 4               | 4 |----|                          +---+---+---+---+---+---+---+---+ 
     /\                     +---+   /\                   101    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location 
    main                           malloc                       +---+---+---+---+---+---+---+---+ 
    function                       function              102    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location     
                                (Analogy: Suresh)               +---+---+---+---+---+---+---+---+
                                                         103    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location     
                                                                +---+---+---+---+---+---+---+---+
  
            Lets say malloc finds that starting location 100, there are 4 bytes which are free.


               malloc(4);            
               book-seats(4);                          Memory      Memory
            +-----------------+                        address
            |                 |                                 +---+---+---+---+---+---+---+---+
     O      |                 V      O               r   100    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location
     |- --- 4               | 4 |----|                          +---+---+---+---+---+---+---+---+ 
     /\                     +---+   /\               r   101    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location 
    main                           malloc                       +---+---+---+---+---+---+---+---+ 
    function   <----------------   function          r   102    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location     
                   100          (Analogy: Suresh)               +---+---+---+---+---+---+---+---+
                                                     r   103    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location     
                                                                +---+---+---+---+---+---+---+---+

                                               r = reserved/allocated 
                                          Malloc maintains a table internally.
                                          +-----------------------------------+
                                          | No  | Starting  | Number of       |
                                          |     | Memory    | bytes allocated |
                                          |     | Address   | reserved        |
                                          +-----------------------------------+
                                          |  1  |  100      |    4           <--- number of bytes (analogy: seats) allocated/reserved
                                          +-----------------------------------+

   malloc - known as m-alloc (m stands for memory) - returns the starting address of the allocation.
   So in this case, malloc returns 100.


   Q. Is 100 an address?
   A. Yes   

   Q. Who returns 100?
   A. The malloc function.

  in the code

   int main()
   {
      malloc(4);
   }

   The return value of malloc is not stored.
-------------------------------------------------------------------------------------------------

  int main()
  {
       = malloc(4);
         (because malloc returns an address, we want to store in a pointer).
  } 

-------------------------------------------------------------------------------------------------
Code

01 #include <stdio.h>
02 #include <stdlib.h>
03
04 int main()
05 { 
06  int *pi = NULL; // pi has a type of int *
07
08    pi = (int *) malloc(4);  //  pi = (int *) 100 <-- 100 is the value returned by malloc.
09                  
10 }
11

After line number 06

   O   int*     pi   +---+
   |-----------------| 0 <-- NULL value
   /\                +---+
  main                200


After line number 08:

At line number 08 malloc is called
              malloc(4);            
               book-seats(4);                          Memory      Memory
            +-----------------+                        address
            |                 |                                 +---+---+---+---+---+---+---+---+
     O      |                 V      O               r   100    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location
     |- --- 4               | 4 |----|                          +---+---+---+---+---+---+---+---+ 
     /\                     +---+   /\               r   101    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location 
    main                           malloc                       +---+---+---+---+---+---+---+---+ 
    function   <----------------   function          r   102    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location     
                   100          (Analogy: Suresh)               +---+---+---+---+---+---+---+---+
                                                     r   103    |   |   |   |   |   |   |   |   |    <--- 1 byte memory location     
                                                                +---+---+---+---+---+---+---+---+

                                               r = reserved/allocated 
                                          Malloc maintains a table internally.
                                          +-----------------------------------+
                                          | No  | Starting  | Number of       |
                                          |     | Memory    | bytes allocated |
                                          |     | Address   | reserved        |
                                          +-----------------------------------+
                                          |  1  |  100      |    4           <--- number of bytes (analogy: seats) allocated/reserved
                                          +-----------------------------------+

                                                4          O
   O   int*     pi   +---+                 ----------->   -| ....
   |-----------------|100| <---------------------------   /\
   /\                +---+                     100      malloc
  main                200                  returned address from malloc


              pi = (int *) malloc(4);
                      
                       +---+
                       |   |                              4          O
   O   int*     pi   +-V-+ |                         ----------->   -| ....
   |-----------------|100| |   <---------------------------------   /\
   /\                +---+ |       O                O     100      malloc
  main                200  +----- -| <----100 <--- -| <--- 100   returned address from malloc
                                  /\      int *    /\     void *
                               Assignment         Type
                               operator          casting
                                  =

  What is the type of 100?
  Why do we need to type cast it ...

  malloc signature
    void *malloc( size_t  sz );
   malloc takes an argument which is of type size_t (which currently is an integer) and its return type is void *.


------------------------------------------------------------

  Type casting

        L.H.S.  Type   =   R.H.S. Type
      The L.H.S type should match the type on the right hand side.

         int = int
         double = double  
         double = int     ---->   double = (int to double converse) implicit type conversion is done by compiler
         int *  = int *
         int *  =  void *  -----> The compiler is not able to implicitly convert the type from void * to int *.
         So we as programmers have to do explicit type casting.

         int *  = (int *) void *
                  <----->
                     ^
                     |
                     +---- Explicit type casting.
